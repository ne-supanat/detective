// Mocks generated by Mockito 5.4.4 from annotations
// in detective/test/utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:detective/helpers/sharedpref.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SharedPref].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPref extends _i1.Mock implements _i3.SharedPref {
  @override
  _i2.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#prefs),
        ),
        returnValueForMissingStub: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i2.SharedPreferences);

  @override
  _i4.Future<void> addNewCustomCategory(String? value) => (super.noSuchMethod(
        Invocation.method(
          #addNewCustomCategory,
          [value],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<String> getCustomCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCustomCategories,
          [],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  _i4.Future<List<String>> removeCustomCategory(String? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCustomCategory,
          [value],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
}
